#!usr/bin/env python
# -*- coding: utf-8 -*-

import os
import argparse
import sys
from pathlib import Path
import pkg_resources
from datetime import date

import numpy as np
import SimpleITK as sitk

from Methods.itkUtils import *
from Methods.utils import *
from Methods.majority_voting import *
from Methods.wrapper import *
from Methods.wrapper_itk import *

def main():
  copyrightMessage = 'Contact: software@cbica.upenn.edu\n\n' + 'This program is NOT FDA/CE approved and NOT intended for clinical use.\nCopyright (c) ' + str(date.today().year) + ' University of Pennsylvania. All rights reserved.' 
  parser = argparse.ArgumentParser(prog='LabelFusion', formatter_class=argparse.RawTextHelpFormatter, description = "Fusion of different labels together.\n\n" + copyrightMessage)
  parser.add_argument('-inputs', type=str, help = 'The absolute, comma-separated paths of labels that need to be fused', required=True)
  parser.add_argument('-classes', type=str, help = 'The expected labels; for example, for BraTS, this should be \'0,1,2,4\'', required=True)
  parser.add_argument('-method', type=str, help = 'The method to apply; currently available: MajorityVoting | SIMPLE | STAPLE | ITKVoting', required=True)
  parser.add_argument('-output', type=str, help = 'The output file to write the results', required=True)

  args = parser.parse_args()
  
  inputs = list(args.inputs.split(',')) # list of input file paths

  if len(inputs) < 2:
    sys.exit('Cannot perform fusion for less than 2 input labels')

  for i in range(1, len(inputs)):
    if not imageSanityCheck(inputs[0], inputs[i]):
      sys.exit('There is a mismatch between the physical definitions of the input labels, please check')

  class_list = list(args.classes.split(','))
  class_list_int = [int(i) for i in class_list]

  method = args.method.lower()

  direct_itk_methods = ['staple', 'itkvoting']
  
  if not(method in direct_itk_methods): # for non-itk methods, get image arrays
    inputListOfOneHotEncodedMasks = []
    # read first image to keep for metadata
    baseImage = sitk.ReadImage(inputs[0], sitk.sitkUInt8)
    fused_segmentation = sitk.GetArrayFromImage(baseImage) # initialize the fused segmentation array

    inputListOfOneHotEncodedMasks.append(one_hot_nonoverlap(fused_segmentation, class_list_int))

    # construct list of one-hot encoded segmentation arrays
    for i in range(1, len(inputs)):
      currentImageArray = sitk.GetArrayFromImage(sitk.ReadImage(inputs[i], sitk.sitkUInt8))
      currentImageArray_oneHot = one_hot_nonoverlap(currentImageArray, class_list_int)
      inputListOfOneHotEncodedMasks.append(currentImageArray_oneHot)

    # call the fusion
    fused_oneHot = fuse_segmentations(inputListOfOneHotEncodedMasks, method, class_list_int)
    fused_segmentation_image = sitk.GetImageFromArray(convert_to_3D(fused_oneHot, class_list_int))
    fused_segmentation_image.CopyInformation(baseImage)

  else: # for direct itk methods, we actually need the images themselves

    inputSegmentationImages = []
    for i in range(1, len(inputs)):
      inputSegmentationImages.append(sitk.ReadImage(inputs[i], sitk.sitkUInt8))

    # call the fusion
    fused_segmentation_image = fuse_segmentations_itk(inputSegmentationImages, method)

  # finally, write the fused image
  sitk.WriteImage(fused_segmentation_image, args.output)

if __name__ == '__main__':
  main()
